#include "tut.nsh"

#define ADD 0
#define LD 1
#define ST 2
#define JMP 3
#define JZ 4

module tut {
  reg count[8] = 0, pc[8], op[8], im[8], acc[8]=0;
  proc_name ift(pc), ift_wait(), imm(op), imm_wait(), exe(im);

  PC = pc;

  accumulator = acc;

  any{
    count <= 20: count++;
    count == 10: ift(0);
  }

  proc ift{
    // imm(mread(pc++));
    imem_read();
    ift_wait();
  }

  proc ift_wait{
    if(done_imem_read){
      imm(instruction);
      pc++;
    }
  }

  proc imm {
    //exe(mread(pc++));
    imem_read();
    imm_wait();
  }

  proc imm_wait {
    if(done_imem_read){
      exe(instruction);
    }
    pc++;
  }

  proc exe{
    wire nextpc[8];
    any{
      op == ADD: {acc:=acc+im;}
      op == LD:  {acc:=dmem_read(im);}
      op == ST: {dmem_write(im, acc);}
    }

    any{
      op == JMP: {nextpc=im;}
      (op == JZ) && (acc == 0): {nextpc=im;}
      else: nextpc=pc;
    }
    ift(nextpc);
  }
}
